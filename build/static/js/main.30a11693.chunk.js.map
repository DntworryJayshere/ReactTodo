{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","color","boarder","borderRadius","cursor","float","Todos","todos","map","key","headerStyle","textAlign","linkStyle","Header","to","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","flex","placeholder","className","About","Fragment","App","Axios","delete","then","res","filter","post","data","get","exact","path","render","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.30a11693.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class TodoItem extends Component {\r\n  getStyle = () => {\r\n    return {\r\n      background: \"#f4f4f4\",\r\n      padding: \"10px\",\r\n      borderBottom: \"1px #ccc dotted\",\r\n      textDecoration: this.props.todo.completed ? \"line-through\" : \"none\",\r\n    };\r\n  };\r\n\r\n  render() {\r\n    // 5) accessing & destructuring the props on 'this.props.todo' so we can use variables 'id title' directly\r\n    const { id, title } = this.props.todo;\r\n\r\n    // 6) Creating input checkbox so events can take place\r\n    // 6+) onChange of the checkbox -> binding \"this\" id (this.props.todo.id within component TodoItem) to the prop 'this.props.markComplete' passed from 'Todos' component\r\n    // flow1) so event of onchange checkbox the id value will be pushed up/contained within markComplete prop of Todos\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.props.markComplete.bind(this, id)}\r\n          />{\" \"}\r\n          {title}\r\n          <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>\r\n            X\r\n          </button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst btnStyle = {\r\n  background: \"#ff0000\",\r\n  color: \"#fff\",\r\n  boarder: \"none\",\r\n  padding: \"5px 9px\",\r\n  borderRadius: \"50%\",\r\n  cursor: \"pointer\",\r\n  float: \"right\",\r\n};\r\n\r\n//setting proptypes to ensure that props on 'TodoItem' are in the form of an object\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Todos extends Component {\r\n  render() {\r\n    //   3) accessing todos prop from apps/state file as 'this.props.todos'\r\n    //   4) passing down todo props fom '.map((todo)' into Todoitem as 'todo={todo}' with id as key 'key={todo.id}'\r\n    //   7) creating a prop of markComplete (for use of component TodoItem - down the chain) & setting it equal to the prop 'this.props.markComplete' passed from \"App\" component (for use to alter state -- up the chain)\r\n    //   flow2) change event has taken place. The id has been pushed up to \"this\" markComplete & will be pushed once again to App component\r\n    return this.props.todos.map((todo) => (\r\n      <TodoItem\r\n        key={todo.id}\r\n        todo={todo}\r\n        markComplete={this.props.markComplete}\r\n        delTodo={this.props.delTodo}\r\n      />\r\n    ));\r\n  }\r\n}\r\n\r\n//setting proptypes to ensure that props on 'Todos' is an Array (consisting of todo objects)\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Todos;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst headerStyle = {\r\n  background: \"#333\",\r\n  color: \"#fff\",\r\n  textAlign: \"center\",\r\n  padding: \"10px\",\r\n};\r\n\r\nconst linkStyle = {\r\n  color: \"#fff\",\r\n  textDecoration: \"none\",\r\n}\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1>TodoList</h1>\r\n      <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\r\n    </header>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class AddTodo extends Component {\r\n  state = {\r\n    title: \"\",\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.title);\r\n    this.setState({ title: \"\" });\r\n  };\r\n\r\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} style={{ display: \"flex\" }}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          style={{ flex: \"10\" }}\r\n          placeholder=\"add Todo ...\"\r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          name=\"submit\"\r\n          className=\"btn\"\r\n          style={{ flex: \"1\" }}\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n  addTodo: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddTodo;\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is the TodoList app v1.0.0. It is part of a React crash course</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Todos from \"./components/Todos\";\nimport Header from \"./components/layout/Header\";\nimport AddTodo from \"./components/AddTodo\";\nimport About from \"./components/pages/About\";\n// import { v4 as uuidv4 } from \"uuid\";\nimport Axios from \"axios\";\n\nimport \"./App.css\";\n//user guidlines. follow the numbered comments 1-10) between app & component files in the correct order, prior to reading flow#) comments.\n\nclass App extends Component {\n  //  1) maintining 'todos' state within our app.js file\n  state = {\n    todos: [],\n  };\n\n  componentDidMount() {\n    Axios.get(\n      \"https://jsonplaceholder.typicode.com/todos?_limit=15\"\n    ).then((res) => this.setState({ todos: res.data }));\n  }\n\n  // 10a) toggle complete method\n  markComplete = (id) => {\n    //10b) method to alter this state object\n    this.setState({\n      //10c) if the id passed up to the method is equal to the todo(id) contained within the todos: array that is mapped through, then mark it completed and return todo the object to the todos array\n      todos: this.state.todos.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      }),\n    });\n  };\n\n  delTodo = (id) => {\n    Axios.delete(\n      \"https://jsonplaceholder.typicode.com/todos/${id}\"\n    ).then((res) =>\n      this.setState({\n        todos: [...this.state.todos.filter((todo) => todo.id !== id)],\n      })\n    );\n  };\n\n  // ... is a 'spread operator'\n  addTodo = (title) => {\n    Axios.post(\"https://jsonplaceholder.typicode.com/todos\", {\n      title,\n      completed: false,\n    }).then((res) => this.setState({ todos: [...this.state.todos, res.data] }));\n  };\n\n  render() {\n    // 2) pass down todos from state as a prop 'todos={this.state.todos}' for use in class 'Todos'\n    // 9) creating prop markComplete (for use of component 'Todos' - down the chain) so that the markComplete method in this 'App' class can alter state\n    // flow3) change event has taken place. The id has been pushed up to \"this\" markComplete & will be excecuted in the markComplete method\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route\n              exact\n              path=\"/\"\n              render={(props) => (\n                <React.Fragment>\n                  <AddTodo addTodo={this.addTodo} />\n                  <Todos\n                    todos={this.state.todos}\n                    markComplete={this.markComplete}\n                    delTodo={this.delTodo}\n                  />\n                </React.Fragment>\n              )}\n            />\n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}